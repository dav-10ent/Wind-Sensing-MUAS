/**
 * TCA9548 I2CScanner.pde -- I2C bus scanner for Arduino
 *
 * Based on code c. 2009, Tod E. Kurt, http://todbot.com/blog/
 *
 */

#include <SD.h>
#include <SPI.h>

File myFile;
const int chipSelect = BUILTIN_SDCARD;
unsigned long time;
int led = 13;
double channel;


#include "Wire.h"
extern "C" { 
#include "utility/twi.h"  // from Wire library, so we can do bus scanning
}
 
#define TCAADDR 0x70
#include "hsc_ssc_i2c.h"

#define TCAADDR 0x70
#define SLAVE_ADDR 0x28
#define OUTPUT_MIN 0
#define OUTPUT_MAX 0x3fff       // 2^14 - 1
#define PRESSURE_MIN 0.0        // min is 0 for sensors that give absolute values
#define PRESSURE_MAX 206842.7   // 30psi (and we want results in pascals)

uint32_t prev = 0; 
const uint32_t interval = 0.0001;
 
void tcaselect(uint8_t i) {
  if (i > 7) return;
 
  Wire.beginTransmission(TCAADDR);
  Wire.write(1 << i);
  Wire.endTransmission();  
}
 
 
// standard Arduino setup()
void setup()
{
    delay(1000);
    pinMode(2,INPUT);
    pinMode(led, OUTPUT);
    digitalWrite(led, HIGH); 
    Wire.begin();
 
    
    Serial.begin(115200);
    Serial.println("\nTCAScanner ready!");

    Serial.print("Initializing SD card...");
    if (!SD.begin(chipSelect)) {
      Serial.println("initialization failed!");
      return;
    }
    Serial.println("initialization done.");
      if (SD.begin(chipSelect)){
        Serial.println("SD Card Ready");
        myFile=SD.open("data.csv", FILE_WRITE);
        if(myFile){
          myFile.println("Pressure 1, Pressure 2, Pressure 3, Pressure 4"); 
          myFile.close();
      }
    return;
    }
    
    for (uint8_t t=0; t<8; t++) {
      tcaselect(t);
      Serial.print("TCA Port #"); Serial.println(t);
 
      for (uint8_t addr = 0; addr<=127; addr++) {
        if (addr == TCAADDR) continue;
      
        uint8_t data;
        if (! twi_writeTo(addr, &data, 0, 1, 1)) {
           Serial.print("Found I2C 0x");  Serial.println(addr,HEX);
        }
      }
    }
    Serial.println("\ndone");

}
 
void loop() 
{
  sensor1read;
  sensor2read;
  sensor3read;
  sensor4read;
  delay(500);

}


void sensor1read(){
    tcaselect(0);
  unsigned long now = millis();
  struct cs_raw ps;
  char p_str[10], t_str[10];
  uint8_t el;
  float p, t;
  if ((now - prev > interval) && (Serial.available() <= 0)) {
      prev = now;
      el = ps_get_raw(SLAVE_ADDR, &ps);
        // for some reason my chip triggers a diagnostic fault
        // on 50% of powerups without a notable impact 
        // to the output values.
      if ( el == 4 ) {
          Serial.println("err sensor missing");
      } else {
          if ( el == 3 ) {
              Serial.print("err diagnostic fault ");
              Serial.println(ps.status, BIN);
          }
          if ( el == 2 ) {
              // if data has already been feched since the last
              // measurement cycle
              Serial.print("warn stale data ");
              Serial.println(ps.status, BIN);
          }
          if ( el == 1 ) {
              // chip in command mode
              // no clue how to end up here
              Serial.print("warn command mode ");
              Serial.println(ps.status, BIN);
          }
          ps_convert(ps, &p, &t, OUTPUT_MIN, OUTPUT_MAX, PRESSURE_MIN,
                 PRESSURE_MAX);
          // floats cannot be easily printed out
          dtostrf(p, 2, 2, p_str);
          dtostrf(t, 2, 2, t_str);
          Serial.print(prev);
          Serial.print("  ");
          Serial.println(p_str);
          myFile=SD.open("data.csv", FILE_WRITE);
          if(myFile){
               myFile.println(p_str); 
               myFile.close();
          }
          delay(1);
      }
    
  }
}


  void sensor2read(){
      tcaselect(1);
  unsigned long now = millis();
  struct cs_raw ps;
  char p_str[10], t_str[10];
  uint8_t el;
  float p, t;
  if ((now - prev > interval) && (Serial.available() <= 0)) {
      prev = now;
      el = ps_get_raw(SLAVE_ADDR, &ps);
        // for some reason my chip triggers a diagnostic fault
        // on 50% of powerups without a notable impact 
        // to the output values.
      if ( el == 4 ) {
          Serial.println("err sensor missing");
      } else {
          if ( el == 3 ) {
              Serial.print("err diagnostic fault ");
              Serial.println(ps.status, BIN);
          }
          if ( el == 2 ) {
              // if data has already been feched since the last
              // measurement cycle
              Serial.print("warn stale data ");
              Serial.println(ps.status, BIN);
          }
          if ( el == 1 ) {
              // chip in command mode
              // no clue how to end up here
              Serial.print("warn command mode ");
              Serial.println(ps.status, BIN);
          }
          ps_convert(ps, &p, &t, OUTPUT_MIN, OUTPUT_MAX, PRESSURE_MIN,
                 PRESSURE_MAX);
          // floats cannot be easily printed out
          dtostrf(p, 2, 2, p_str);
          dtostrf(t, 2, 2, t_str);
          Serial.print(prev);
          Serial.print("  ");
          Serial.println(p_str);
          myFile=SD.open("data.csv", FILE_WRITE);
          if(myFile){
               myFile.println(p_str); 
               myFile.close();
          }
          delay(1);
      }
  }
  }

      void sensor3read(){
          tcaselect(2);
          unsigned long now = millis();
          struct cs_raw ps;
          char p_str[10], t_str[10];
          uint8_t el;
          float p, t;
          if ((now - prev > interval) && (Serial.available() <= 0)) {
            prev = now;
             el = ps_get_raw(SLAVE_ADDR, &ps);
        // for some reason my chip triggers a diagnostic fault
        // on 50% of powerups without a notable impact 
        // to the output values.
          if ( el == 4 ) {
              Serial.println("err sensor missing");
          } else {
              if ( el == 3 ) {
                  Serial.print("err diagnostic fault ");
                  Serial.println(ps.status, BIN);
              }
              if ( el == 2 ) {
              // if data has already been feched since the last
              // measurement cycle
              Serial.print("warn stale data ");
              Serial.println(ps.status, BIN);
          }
              if ( el == 1 ) {
              // chip in command mode
              // no clue how to end up here
              Serial.print("warn command mode ");
              Serial.println(ps.status, BIN);
          }
          ps_convert(ps, &p, &t, OUTPUT_MIN, OUTPUT_MAX, PRESSURE_MIN,
                 PRESSURE_MAX);
          // floats cannot be easily printed out
          dtostrf(p, 2, 2, p_str);
          dtostrf(t, 2, 2, t_str);
          Serial.print(prev);
          Serial.print("  ");
          Serial.println(p_str);
          myFile=SD.open("data.csv", FILE_WRITE);
          if(myFile){
               myFile.println(p_str); 
               myFile.close();
          }
          delay(1);

          }
          }
      }



          void sensor4read(){
                      tcaselect(3);
          unsigned long now = millis();
          struct cs_raw ps;
          char p_str[10], t_str[10];
          uint8_t el;
          float p, t;
          if ((now - prev > interval) && (Serial.available() <= 0)) {
            prev = now;
            el = ps_get_raw(SLAVE_ADDR, &ps);
        // for some reason my chip triggers a diagnostic fault
        // on 50% of powerups without a notable impact 
        // to the output values.
          if ( el == 4 ) {
              Serial.println("err sensor missing");
          } else {
              if ( el == 3 ) {
                  Serial.print("err diagnostic fault ");
                  Serial.println(ps.status, BIN);
              }
              if ( el == 2 ) {
              // if data has already been feched since the last
              // measurement cycle
                  Serial.print("warn stale data ");
                  Serial.println(ps.status, BIN);
              }
              if ( el == 1 ) {
              // chip in command mode
              // no clue how to end up here
              Serial.print("warn command mode ");
              Serial.println(ps.status, BIN);
          }
          ps_convert(ps, &p, &t, OUTPUT_MIN, OUTPUT_MAX, PRESSURE_MIN,
                 PRESSURE_MAX);
          // floats cannot be easily printed out
          dtostrf(p, 2, 2, p_str);
          dtostrf(t, 2, 2, t_str);
          Serial.print(prev);
          Serial.print("  ");
          Serial.println(p_str);
          myFile=SD.open("data.csv", FILE_WRITE);
          if(myFile){
               myFile.println(p_str); 
               myFile.close();
          }
          delay(1);          

          }
          }
          }
          
          
          
          
